{"pages":[],"posts":[{"title":"","text":"java引用 vs c++引用 1 [c++引用] (https://blog.csdn.net/dujiangyan101/article/details/2844138) - 引用 引用不可为空，对象必须存在不可为null 地址概念：某块内存的别名 引用是别名，地址不可更改 引用使用无需解引*，对引用的赋值为对地址变量的赋值 sizeof引用为引用指向的对象的大小 i 12345678910111213141516int j = 6; int &amp;k = i; k = j; // k 和i 的值都变成了6;``` 1.2 [java引用](https://blog.csdn.net/jiangnan2014/article/details/22944075)-&gt;**引用**&gt;&gt;+ 所有的参数传递都是 传值，从来没有 传引用 这个事实；&gt;&gt;+ 所有的参数传递都会在 程序运行栈上 新分配一个 值 的复制品；&gt;&gt;+ java只有按值传递，所谓的按地址(引用)传递，也属于按值传递，只不过这个“值”是个地址;&gt;&gt;+ 对于引用类型的传参也是传值的，传的是引用类型的值，其实就是对象的地址；&gt;&gt;+ java所有对像变量都是对像的引用；&gt;&gt;+ 函数的形式参数，是传入参数的拷贝；引用变量之间拷贝的是【地址】，基本变量之间拷贝的是 内存中的值 （被称为直接量）； &gt;&gt;&gt;&gt; public class Test1{ String a = “123”; public static void test(Test1 test) { test.a = “abc”;//更改test指向的内存空间的值 } public static void main(String[] args) { Test1 test1 = new Test1(); test1.a = “567”; System.out.println(test1.a); //567 test(test1);//复制test1的地址至test System.out.println(test1.a); //abc }} 123&gt;&gt;+ java引用可以改变引用的地址，java引用.为对引用地址所指向对象的操作，=表示对引用本身的修改（地址)&gt;&gt; &gt;&gt; public class Test{ public static void test(StringBuffer str) { str.append(“world”);//改变引用对象的内存空间的值 str = new StringBuffer(“world”);//更新地址，并对地址对象赋值，不会改变原值 } public static void main(String[] args) { StringBuffer str = new StringBuffer(“hello”); System.out.println(str); //hello test(str);//复制地址 System.out.println(str); //hello }}","link":"/2019/06/10/java/"},{"title":"tcp/ip http","text":"1 plan1.1 socket简介1.2 socket-tcp1.3 socket-udp##1.4 协议：tcp ip udp http ##1.5 http协议 http2.0 ##1.6 并发编程 select I/O复用","link":"/2019/06/05/tcp-ip-http/"}],"tags":[],"categories":[]}